
# ==================================================================================================================================
# START >> FILE INFO
# ==================================================================================================================================
# File        : facial_keypoint_detecter/__auxil_subpkg__/_auxil_submod.py
# Author      : Shashank Kumbhare
# Date        : 30/10/2022
# email       : shashankkumbhare8@gmail.com
# Description : This file is a python submodule for python subpackage
#               'facial_keypoint_detecter.__auxil_subpkg__'.
# ==================================================================================================================================
# END << FILE INFO
# ==================================================================================================================================



# ==================================================================================================================================
# START >> SUBMODULE >> facial_keypoint_detecter.__auxil_subpkg__._auxil_submod
# ==================================================================================================================================

# >>
"""
This submodule contains some auxiliary functions being used in rest of the modules
and submodules.
"""



# ==================================================================================
# START >> IMPORTS
# ==================================================================================
# >>
from ..__constants_subpkg__    import *
# <<
# ==================================================================================
# END << IMPORTS
# ==================================================================================


# ==================================================================================
# START >> EXPORTS
# ==================================================================================
# >>
__all__ = []
# <<
# ==================================================================================
# END << EXPORTS
# ==================================================================================


# # ==================================================================================================================================
# # START >> FUNCTION >> apply_glasses
# # ==================================================================================================================================
# # >>
# def apply_glasses   ( image
#                     , file_model   = "default"
#                     , figsizeScale = DEFAULT_FIGSIZESCALE
#                     ) :
#
#     """
#     ================================================================================
#     START >> DOC >> apply_glasses
#     ================================================================================
#
#         GENERAL INFO
#         ============
#
#             Applies input glasses to the detected face.
#
#         PARAMETERS
#         ==========
#
#             file_image <str>
#
#                     File path of the input image.
#
#             file_model <str>
#
#                 A file-like object, or a string or os.PathLike object containing
#                 a file name.
#                 If "default", a saved model in this package will be used.
#
#         RETURNS
#         =======
#
#             None
#
#     ================================================================================
#     END << DOC << apply_glasses
#     ================================================================================
#     """
#
#     # Loading model if file_model is provided >>
#     if file_model != "default":
#         # self.load_model(file_model)
#         None
#
#     # keypoints, images = self.detect_facial_keypoints(file_image)
#
#     return None
# # <<
# # ==================================================================================================================================
# # END << FUNCTION << apply_glasses
# # ==================================================================================================================================



# ==================================================================================================================================
# START >> FUNCTION >> _template_submod_func
# ==================================================================================================================================
# >>
def _template_submod_func   ( p_p_p_p_1 = ""
                            , p_p_p_p_2 = ""
                            ) :
    
    """
    ================================================================================
    START >> DOC >> _template_submod_func
    ================================================================================
        
        GENERAL INFO
        ============
            
            t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t_t t_t_t_t t_t t_t_t_t t_t_t t_t
            t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t_t t_t_t_t t_t t_t_t_t t_t_t t_t
            t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t_t t_t_t_t t_t t_t_t_t t_t_t t_t
        
        PARAMETERS
        ==========
            
            p_p_p_p_1 <type>
                
                t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t
                t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t
            
            p_p_p_p_2 <type>
                
                t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t
                t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t
        
        RETURNS
        =======
            
            r_r_r_r <type>
                
                t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t_t t_t_t_t_t t_t t_t_t_t t_t
    
    ================================================================================
    END << DOC << _template_submod_func
    ================================================================================
    """
    _name_func = inspect.stack()[0][3]
    print(f"This is a print from '{_name_func}'{p_p_p_p_1}{p_p_p_p_2}.")
    
    return None
# <<
# ==================================================================================================================================
# END << FUNCTION << _template_submod_func
# ==================================================================================================================================



# <<
# ==================================================================================================================================
# END << SUBMODULE << facial_keypoint_detecter.__auxil_subpkg__._auxil_submod
# ==================================================================================================================================
